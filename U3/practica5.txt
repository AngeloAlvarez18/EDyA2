Practica 5

1. Las listas finitas pueden especificarse como un TAD con los constructores:
• nil: Construye una lista vacia.
• cons: Agrega un elemento a la lista.
y las siguientes operaciones:
• null : Nos dice si la lista es vacia o no.
• head: Devuelve el primer elemento de la lista.
• tail: Devuelve todos los elementos de la lista menos el primero.

a) Dar una especificacion algebraica del TAD listas finitas.

tad List (A:Set) where
    import Bool
    nil : List A
    cons : A -> List A -> List A
    null : List A -> Bool
    head : List A -> A
    tail : List A -> List A

null nil = True
null (cons a xs) = False
head nil = nil 
head (cons a xs) = a
tail nil = nil
tail (cons a xs) = xs

b) Dar una especificacion tomando como modelo las secuencias.

nil = <>
cons x <x1, x2, ..., xn> = <x, x1, x2, ..., xn> Si n = 0 es la lista vacia
null <x1, ..., xn> = True  SI n = 0
null <x1, ..., xn> = False en otro caso
head <x1, ..., xn> = x1
tail <x1, x2, ..., xn> = <x2, ..., xn>

c) Asumiendo que A es un tipo con igualdad, especificar una funcion inL : List A → A → Bool tal que inL ls x =
true si y solo si x es un elemento de ls.

inL nil x = False
inL (cons a xs) x = if a == x then True else inL xs x


d) Especificar una funcion que elimina todas las ocurrencias de un elemento dado.

eliminarL nil x = nil
eliminarL (cons a xs) x = if a == x then eliminarL xs x 
                            else cons a (eliminarL xs x)


2. Dado el TAD pilas, con las siguientes operaciones:
• empty: Construye una pila inicialmente vacia.
• push: Agrega un elemento al tope de la pila.
• isEmpty: Devuelve verdadero si su argumento es una pila vacia, falso en caso contrario.
• top: Devuelve el elemento que se encuentra al tope de la pila.
• pop: Saca el elemento que se encuentra al tope de la pila
Dar una especificacion algebraica del TAD pilas y una especificacion tomando como modelo las secuencias

tad Pila (A:Set) where
    import Bool
    empty : Pila A
    push : A -> Pila A -> Pila A
    isEmpty : Pila A -> Bool
    top : Pila A -> A
    pop : Pila A -> Pila A

isEmpty empty = True
isEmpty push a b = False
top push a b = a
pop push a b = b

Modelos: 

empty = <>
push x <x1, ..., xn> = <x, x1, ..., xn>
isEmpty <x1, ..., xn> = True si n = 0
isEmpty <x1, ..., xn> = False en otro caso
top <x1, ..., xn> = <> si n = 0
top <x1, ..., xn> = x1 en otro caso
pop <x1, x2, ..., xn> = <> si n = 0
pop <x1, x2, ..., xn> = <x2, ..., xn> en otro caso

3. Asumiendo que A es un tipo con igualdad, completar la siguiente especificacion algebraica del TAD conjunto.
tad Conjunto (A : Set) where
import Bool
vacıo : Conjunto A
insertar : A → Conjunto A → Conjunto A
borrar : A → Conjunto A → Conjunto A
esVacıo : Conjunto A → Bool
union : Conjunto A → Conjunto A → Conjunto A
interseccion : Conjunto A → Conjunto A → Conjunto A
resta : Conjunto A → Conjunto A → Conjunto A
insertar x (insertar x c) = insertar x c
insertar x (insertar y c) = insertar y (insertar x c)
...
¿Que pasarıa si se agregase una funcion choose : Conjunto A → A, tal que choose (insertar x c) = x ?

insertar x (insertar x c) = insertar x c
insertar x (insertar y c) = insertar y (insertar x c)
insertar x vacio = insertar x vacio

borrar x vacio = insertar x vacio
borrar x (insertar x c) = c
borrar x (insertar y c) = insertar y (borrar x c)

esVacio vacio = True
esVacio insertar x y = False

union vacio vacio = vacio
union vacio _ = _
union _ vacio = _
union (insertar a b) (insertar x y) = insertar a (union b (insertar x y))

interseccion vacio vacio = vacio
interseccion vacio _ = _
interseccion _ vacio = _
interseccion (insertar a b) c = if pertenece a c then insertar a (interseccion b c)
                                else interseccion b c

resta vacio vacio = vacio
resta _ vacio = _
resta (insertar a b) c = if pertenece a c then resta b c
                        else insertar a (resta b c)

 
4. El TAD priority queue es una cola en la cual cada elemento tiene asociado un valor que es su prioridad (a dos
elementos distintos le corresponden prioridades distintas). Los valores que definen la prioridad de los elementos
pertenecen a un conjunto ordenado. Las siguientes son las operaciones soportadas por este TAD:

• vacıa: Construye una priority queue vacıa.
• poner: Agrega un elemento a una priority queue con una prioridad dada.
• primero: Devuelve el elemento con mayor prioridad de una priority queue.
• sacar: Elimina de una priority queue el elemento con mayor prioridad.
• esVacıa: Determina si una priority queue es vacıa.
• union: Une dos priority queues.
Dar una especificacion algebraica del TAD priority queue y una especificacion tomando como modelo los conjuntos

tad PQueue (A:set, B: Ordered Set) where
    import Bool
    vacia : PQueue A B
    poner : A -> B -> PQueue A B
    primero : PQueue A B -> A
    sacar : PQueue A B -> PQueue A B
    esVacia : PQueue A B -> Bool
    union : PQueue A B -> PQueue A B -> PQueue A B

existe a b vacia = False
existe a b (poner c d e) = if a == c && b == d then True else existe a b e

poner a b vacia = poner a b vacia
poner a b (poner a b e) = poner a b e
poner a b pq@(poner c d e) | existe a pq = insertar a b (eliminar a pq)
                           | b == d = poner a b e
                           | b < d = poner a b (poner c d e)
                           | b > d = poner c d (poner a b e)


primero vacia = undefined
primero poner a b c = a

sacar vacia = vacia
sacar poner a b c = c

esVacia vacia = True
esVacia poner a b _ = False

union vacia _ = _
union _ vacia = _
union (poner a b c) poner x y z = poner a b (union c (poner x y z))


Especificacion por modelos usando conjuntos:

vacia = {}

poner x y {} = {(a, b)}
poner x y pq@{(a1, b1), (a2, b2), ..., (an, bn)} | (x, y) ∈ pq = pq
                                                 | y == b1 = {(x, y), (a2, b2), ..., (an, bn)}
                                                 | y < b1 = {(x, y), (a1, b1), (a2, b2), ..., (an, bn)}
                                                 | b > d = {(a1, b1)} U poner x y pq

primero {} = undefined
primero {(a1, b1), ..., (an, bn)} = ai
                                    |
                                    Siendo bi la prioridad más alta
                                    |
sacar {} = {}
sacar {(a1, b1), ..., (an, bn)} = {(a1, b1), ..., (ai-1, bi-1), (ai+1, bi+1), ..., (an, bn)}

union {(a1, b1), ..., (an, bn)} {} = {}
union {} {(a1, b1), ..., (an, bn)} = pq
union pq {} = pq
union pq1@{(a1, b1), ..., (an, bn)} pq2@{(x1. y1), ..., (xn, yn)} = poner a1 b1 (union (pq - {(a1, b1)}), pq2)


5. Agregar a la siguiente definicion del TAD arboles balanceados una especificacion algebraica para las operaciones
size y expose:
tad BalT (A : Ordered Set) where
import Maybe
empty : BalT A
join : BalT A → Maybe A → BalT A → BalT A
size : BalT A → N
expose : BalT A → Maybe (BalT A, A, BalT A)
• La operacion join toma un arbol L, un elemento opcional, y un arbol R. Si L y R son arboles de busqueda
balanceados tales que todos los elementos de L sean menores que todos los elementos de R y el elemento
opcional es mas grande que los de L y menor que los de R, entonces join crea un nuevo arbol de busqueda
balanceado.
• Las operaciones empty y size son obvias.
• La operacion expose toma un arbol T y nos da Nothing si el arbol esta vacıo, y en otro caso nos devuelve
un arbol izquierdo, un elemento raız, y un arbol derecho de un arbol de busqueda que contiene todos los
elementos de T.
Notar que join no es simplemente un constructor sino que tiene que realizar cierto trabajo para devolver un arbol
balanceado. Debido a esto es conveniente especificar expose por casos sobre su resultado

size empty = 0
size (join L n R) = 1 + size(L) + size(R)

expose empty = Nothing
expose (L n R) = 


6. Demostrar que (uncurry zip) ◦ unzip = id, siendo:
zip :: [a] → [b] → [(a, b)]
zip [ ] ys = [ ]
zip (x : xs) [ ] = [ ]
zip (x : xs) (y : ys) = (x , y) : zip xs ys
unzip :: [(a, b, )] → ([a ], [b ])
unzip [ ] = ([ ], [ ])
unzip ((x , y) : ps) = (x : xs, y : ys)
where (xs, ys) = unzip ps

sea P = (uncurry zip)  . unzip xs = id

Nuestra HI es que si P(xs) entonces P(x:xs)

Caso []

(uncurry zip) . unzip []
<unzip []>
uncurry zip ([], [])
<uncurry zip ([], [])>
[]

Caso xs

(uncurry zip) . unzip (x, y):ps
<unzip .2> 
uncurry zip (x:xs, y:ys) where (xs, ys) = unzip ps
<uncurry zip .3> 
(x, y): uncurry zip (xs, ys)
<where>
(x, y) : uncurry zip (unzip ps)
<H.I> 
(x, y) : ps

Especificamos uncurry zip

uncurry zip :: ([a], [b]) -> [(a, b)]
uncurry zip (x:xs, []) = []
uncurry zip ((x:xs), (y:ys)) = (x, y) : uncurry zip (xs, ys)


7.
Demostrar que sum xs ⩽ length xs ∗ maxl xs, sabiendo que xs es una lista de numeros naturales y que maxl y sum
se definen
maxl [] = 0 sum [] = 0
maxl (x:xs) = x ‘max‘ maxl xs sum (x:xs) = x + sum xs


Sea P = sum xs <= length xs * maxl xs (HI)

Queremos probar que si P(xs) entonces P(x:xs)

Caso []

sum [] = 0 <= length [] * maxl [] = 0 * 0 = 0

Caso (x:xs)

length (x:xs) * maxl (x:xs)
<length (x:xs)> 
(1 + length xs) * maxl (x:xs)
<maxl (x:xs)>
(1 + length xs) * (x `max` maxl xs)

Dividimos en dos casos

1) <x es el max> 

(1 + length xs) * x = x + length xs * x >= x + sum xs = sum (x:xs)

2) <maxl es el max>

(1 + length xs) * maxl xs = maxl xs + length xs * maxl xs >= x + length xs * maxl xs 
<HI>
x + length xs * maxl xs  >= x + sum xs = sum (x:xs)



8. Dado el siguiente tipo de datos
data Arbol a = Hoja a | Nodo a (Arbol a) (Arbol a)

a) Dar el tipo y definir la funci´on size que calcula la cantidad de elementos que contiene un (Arbol a).
b) Demostrar la validez de la siguiente propiedad: ∀t ∈ (Arbol a). ∃k ∈ N. size t = 2 k + 1
c) Dar el tipo y definir la funci´on mirror que dado un ´arbol devuelve su ´arbol espejo.
d) Demostrar la validez de la siguiente propiedad: mirror ◦ mirror = id
e) Considerando las siguientes funciones:
hojas :: Arbol a → Int
hojas (Hoja x ) = 1
hojas (Nodo x t1 t2) = hojas t1 + hojas t2
altura :: Arbol a → Int
altura (Hoja x ) = 1
altura (Nodo x t1 t2) = 1 + (altura t1 ‘max‘ altura t2)
Demostrar que para todo ´arbol finito t se cumple que hojas t < 2^(altura t)
